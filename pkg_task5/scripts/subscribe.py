#!/usr/bin/env python

import rospy
from pkg_ros_iot_bridge.msg import msgMqttSub  # Message Class for MQTT Subscription Messages
import json
import actionlib
import time

from pkg_ros_iot_bridge.msg import msgRosIotAction  # Message Class that is used by ROS Actions internally
from pkg_ros_iot_bridge.msg import msgRosIotGoal  # Message Class that is used for Goal Messages
from pkg_ros_iot_bridge.msg import msgRosIotResult  # Message Class that is used for Result Messages
from pkg_ros_iot_bridge.msg import msgRosIotFeedback  # Message Class that is used for Feedback Messages

rospy.init_node('node_subscriber')


class ActionClientRosIoTBridge:

	# Constructor
	def __init__(self):

		# Initialize Action Client
		self._ac = actionlib.ActionClient('/action_ros_iot',
										  msgRosIotAction)

		# list to Store all the goal handels
		self._goal_handles = []

		# Store the MQTT Topic on which to Publish in a variable
		param_config_pyiot = rospy.get_param('config_pyiot')
		self._config_mqtt_pub_topic = param_config_pyiot['mqtt']['topic_pub']
		self._config_spread_sheet_id = param_config_pyiot['google_apps']['spread_sheet_id']
		self._config_my_spread_sheet_id = "AKfycbzh5VbH9ZYzlebU6DCewMO3qq25OoGGEgvt_2nRbR0gtE5Cp5K0"
		# Wait for Action Server that will use the action - '/action_ros_iot' to start
		self._ac.wait_for_server()
		rospy.loginfo("Action server ROS Iot Bridge is up, we can send goals.")

	# This function will be called when there is a change of state in the Action Client State Machine
	def on_transition(self, goal_handle):

		# from on_goal() to on_transition(). goal_handle generated by send_goal() is used here.

		result = msgRosIotResult()

		# index = 0
		# for i in range(len(self._goal_handles)):
		# 	if self._goal_handles[i] == goal_handle:
		# 		index = i
		# 		break

		index = self._goal_handles.index(goal_handle)
		rospy.loginfo("Transition Callback. Client Goal Handle #: " + str(index))
		rospy.loginfo("Comm. State: " + str(goal_handle.get_comm_state()))
		rospy.loginfo("Goal Status: " + str(goal_handle.get_goal_status()))

		# Comm State - Monitors the State Machine of the Client which is different from Server's
		# Comm State = 2 -> Active
		# Comm State = 3 -> Wating for Result
		# Comm State = 7 -> Done

		# if (Comm State == ACTIVE)
		if goal_handle.get_comm_state() == 2:
			rospy.loginfo(str(index) + ": Goal just went active.")

		# if (Comm State == DONE)
		if goal_handle.get_comm_state() == 7:
			rospy.loginfo(str(index) + ": Goal is DONE")
			rospy.loginfo(goal_handle.get_terminal_state())

			# get_result() gets the result produced by the Action Server
			result = goal_handle.get_result()
			rospy.loginfo(result.flag_success)

			if result.flag_success == True:
				rospy.loginfo("Goal successfully completed. Client Goal Handle #: " + str(index))
				# self._goal_handles.remove(goal_handle)
				# rospy.loginfo("Client Goal Handle #: {} removed".format(index))
			else:
				rospy.loginfo("Goal failed. Client Goal Handle #: " + str(index))

	# This function is used to send Goals to Action Server
	def send_goal(self, arg_protocol, arg_mode, arg_topic, arg_message):
		# Create a Goal Message object
		goal = msgRosIotGoal()

		goal.protocol = arg_protocol
		goal.mode = arg_mode
		goal.topic = arg_topic
		goal.message = arg_message

		rospy.loginfo("Send goal.")

		# self.on_transition - It is a function pointer to a function which will be called when 
		#                       there is a change of state in the Action Client State Machine
		goal_handle = self._ac.send_goal(goal,
										 self.on_transition,
										 None)
		self._goal_handles.append(goal_handle)
		return goal_handle


client = ActionClientRosIoTBridge()

def iot_cmd_callback(message):
#    print("From my script: {}".format(message))
    
    dict_msg = message.message.replace("order_id", "Order ID").replace("order_time", "Order Date and Time").replace("item", "Item").replace("qty", "Order Quantity").replace("city", "City").replace("lat", "Latitude").replace("lon","Longitude")
    message_ = str(json.loads(dict_msg))
    print(message_)
    client.send_goal("http", "IncomingOrders", client._config_spread_sheet_id, message_)

rospy.Subscriber('/ros_iot_bridge/mqtt/sub', msgMqttSub, iot_cmd_callback)
rospy.spin()